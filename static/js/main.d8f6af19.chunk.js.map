{"version":3,"sources":["components/Display.js","components/Button.js","components/ButtonPanel.js","logic/operate.js","logic/calculate.js","components/App.js","serviceWorker.js","index.js"],"names":["display","props","result","className","defaultProps","button","name","color","wide","clickHandler","type","style","background","width","onClick","buttonPanel","handleClick","buttonName","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","calculate","buttonType","total","next","calculator","Number","concat","test","newTotal","App","bind","state","this","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8f6af19.chunk.js","sourcesContent":["import React from 'react';\nimport Proptypes from 'prop-types';\nimport '../Display.css';\n\nconst display = props => {\n  const { result } = props;\n  return (\n    <div className=\"Display\">\n      {result}\n    </div>\n  );\n};\n\ndisplay.defaultProps = {\n  result: '0',\n};\n\ndisplay.propTypes = {\n  result: Proptypes.string,\n};\nexport default display;\n","import React from 'react';\nimport Proptypes from 'prop-types';\nimport '../Button.css';\n\nconst button = ({\n  name, color, wide, clickHandler,\n}) => {\n  function handleClick(buttonName) {\n    return clickHandler(buttonName);\n  }\n  return (\n    <button\n      type=\"button\"\n      className=\"Button\"\n      style={{ background: color, width: wide === true ? '50%' : '25%' }}\n      onClick={() => handleClick(name)}\n    >\n      {name}\n    </button>\n  );\n};\nbutton.defaultProps = {\n  name: '',\n  color: '#FA9F42',\n  wide: false,\n  clickHandler: null,\n};\n\nbutton.propTypes = {\n  name: Proptypes.string,\n  color: Proptypes.string,\n  wide: Proptypes.bool,\n  clickHandler: Proptypes.func,\n};\n\n\nexport default button;\n","import React from 'react';\nimport Proptypes from 'prop-types';\nimport Button from './Button';\nimport '../ButtonPanel.css';\n\nconst buttonPanel = props => {\n  function handleClick(buttonName) {\n    return props.clickHandler(buttonName);\n  }\n  return (\n\n    <div className=\"ButtonPanel\">\n      <div className=\"group group-1\">\n        <Button name=\"AC\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"+/-\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"%\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"รท\" clickHandler={handleClick} />\n      </div>\n      <div className=\"group group-2\">\n        <Button name=\"7\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"8\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"9\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"x\" clickHandler={handleClick} />\n      </div>\n      <div className=\"group group-3\">\n        <Button name=\"4\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"5\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"6\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"-\" clickHandler={handleClick} />\n      </div>\n      <div className=\"group group-4\">\n        <Button name=\"1\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"2\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"3\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"+\" clickHandler={handleClick} />\n      </div>\n      <div className=\"group group-5\">\n        <Button name=\"0\" wide color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\".\" color=\"#E0E0E2\" clickHandler={handleClick} />\n        <Button name=\"=\" clickHandler={handleClick} />\n      </div>\n    </div>\n  );\n};\nbuttonPanel.defaultProps = {\n  clickHandler: null,\n};\nbuttonPanel.propTypes = {\n  clickHandler: Proptypes.func,\n\n};\n\n\nexport default buttonPanel;\n","// eslint-disable-next-line\nimport Big from 'big.js';\n\nfunction operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    if (numberTwo === '0') {\n      return 'Infinity';\n    }\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(2).toString();\n  }\n\n  return null;\n}\n\nexport default operate;\n","import operate from './operate';\n\nconst calculate = ({ total, next, operation }, buttonType) => {\n  const calculator = { total, next, operation };\n\n  if (buttonType === '+/-') {\n    if (!calculator.next) {\n      calculator.total = (-calculator.total).toString();\n    } else if (calculator.next) {\n      calculator.next = (-calculator.next).toString();\n    }\n    return calculator;\n  }\n  if (\n    buttonType === '+'\n    || buttonType === '-'\n    || buttonType === 'x'\n    || buttonType === 'รท'\n    || buttonType === '%'\n  ) {\n    if (calculator.next) {\n      const result = operate(total, next, buttonType);\n      calculator.total = result;\n      return calculator;\n    }\n  }\n\n  if (buttonType === 'AC') {\n    calculator.total = '0';\n    calculator.next = null;\n    calculator.operation = null;\n  } else if (Number(buttonType) || Number(buttonType) === 0) {\n    if (!operation) {\n      if (total) {\n        if (total === '0') {\n          calculator.total = buttonType;\n          calculator.next = null;\n        } else {\n          calculator.total = total.concat(buttonType);\n        }\n      } else {\n        calculator.total = buttonType;\n      }\n    } else if (next) {\n      calculator.next = next.concat(buttonType);\n    } else {\n      calculator.next = buttonType;\n    }\n  } else if (buttonType === '.') {\n    if (!operation) {\n      if (!/\\D/.test(total)) {\n        calculator.total = total.concat('.');\n      }\n    } else if (!/\\D/.test(next)) {\n      calculator.next = next.concat('.');\n    }\n  } else if (buttonType === '=') {\n    if (total && next && operation) {\n      const result = calculate(calculator, operation);\n      const newTotal = result.total;\n      calculator.total = newTotal;\n      calculator.next = null;\n      calculator.operation = null;\n    }\n  } else {\n    calculator.operation = buttonType;\n  }\n\n  return calculator;\n};\n\nexport default calculate;\n","import React from 'react';\nimport '../App.css';\nimport Display from './Display';\nimport ButtonPanel from './ButtonPanel';\n// eslint-disable-next-line\nimport calculate from '../logic/calculate';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      total: '0',\n      next: null,\n      operation: null,\n    };\n  }\n\n  handleClick(buttonType) {\n    const { total, next, operation } = calculate(this.state, buttonType);\n    this.setState({\n      total,\n      next,\n      operation,\n    });\n  }\n\n  render() {\n    const { total, next, operation } = this.state;\n\n\n    return (\n      <div className=\"App\">\n        <Display result={\n        operation === null ? total : next\n      }\n        />\n        {' '}\n        <ButtonPanel clickHandler={\n        this.handleClick\n      }\n        />\n        {' '}\n\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n/* eslint-disable */\n\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}